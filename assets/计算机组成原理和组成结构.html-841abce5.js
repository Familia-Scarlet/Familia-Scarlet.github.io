import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as t,e,a,b as i}from"./app-4ad29705.js";const n="/assets/截图_20230522115949-ac178b7b.png",p="/assets/截图_20230522183216-1771523f.png",h={},r=e('<h2 id="数据的表示" tabindex="-1"><a class="header-anchor" href="#数据的表示" aria-hidden="true">#</a> 数据的表示</h2><h3 id="原、反、补、移" tabindex="-1"><a class="header-anchor" href="#原、反、补、移" aria-hidden="true">#</a> 原、反、补、移</h3><ul><li><p>正数的原码、反码、补码、移码相同</p></li><li><p>负数的反码是原码的非符号位全取反，补码是原码的非符号位全取反再+1，移码是补码的符号位取反</p></li></ul><p>​ 补码常通过扫码法获取，方法是从右往左找出原码的第一个1，这个1保持不变，其他非符号 位取反。另外，补码的补码就是原码。</p><ul><li><p>n个位时数值的表示范围</p><p>原码和反码是一致的，因为有+0和-0的区分。</p><p>在补码中，+0和-0的补码都是全0，既然补码0能表示+0和-0，那么就代表着有一个补码是多出来的，于是补码则将1000当做最小的数，这是规定，所以在负数段会有2^(n-1)个数。</p></li></ul><h3 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数" aria-hidden="true">#</a> 浮点数</h3><p>计算过程是对阶、尾数计算、规格化</p><h2 id="计算机结构" tabindex="-1"><a class="header-anchor" href="#计算机结构" aria-hidden="true">#</a> 计算机结构</h2><ul><li>运算器：算数逻辑单元ALU、累加寄存器AC、数据缓冲寄存器DR、状态条件寄存器PSW</li><li>控制器：程序计数器PC、指令寄存器IR、指令译码器、时序部件</li></ul><h2 id="flynn分类法" tabindex="-1"><a class="header-anchor" href="#flynn分类法" aria-hidden="true">#</a> Flynn分类法</h2><p>Flynn分类法是计算机结构的分类方法，指标是指令流和数据流数量。</p><p>单指令单数据流SISD，一条指令由一个CPU处理，单CPU计算机</p><p>单指令多数据流SIMD，一条指令由多个CPU处理，多CPU计算机</p><p>多指令单数据流MISD，多条指令由一个CPU处理，没意义或者指流水线技术</p><p>多指令多数据流MIMD，多条指令由多个CPU处理，多计算机集群</p><h2 id="cisc与risc" tabindex="-1"><a class="header-anchor" href="#cisc与risc" aria-hidden="true">#</a> CISC与RISC</h2><table><thead><tr><th>指令系统类型</th><th>指令特征</th><th>实现方式</th><th>其他</th></tr></thead><tbody><tr><td>CISC</td><td>数量多，使用频率差距大，可变长</td><td>微程序控制技术，软件方法</td><td>研制周期长</td></tr><tr><td>RISC</td><td>数量少，使用频率接近，定长，大部分是单周期指令，只有load和store指令能操作内存</td><td>增加通用寄存器，硬布线逻辑控制为主，硬件方法，效率高，适合采用流水线</td><td>优化编译，有效支持高级语言</td></tr></tbody></table><h2 id="流水线技术" tabindex="-1"><a class="header-anchor" href="#流水线技术" aria-hidden="true">#</a> 流水线技术</h2><p>一条指令的顺序是取值、分析、执行，流水线技术的原理就是利用三个步骤使用不同部件进行的特征，将三个步骤重叠，高效利用各个步骤使用到的部件。</p><p>就好比一台汽车，要装发动机，要装车门，但是装发动机时候装车门的工人是空闲的，流水线技术能让全部工人都忙活起来。</p><ul><li><p>流水线吞吐率</p><p>流水线单位执行时间内指令执行的条数。</p></li><li><p>流水线加速比</p><p>不使用流水线的执行时间/使用流水线的执行时间，越大越好</p></li><li><p>流水线的效率</p><p>由于流水线的各个步骤所消耗的时间并不一样，所以有了效率的概念。</p><p>这里的效率指的是在时空图中，工作的时间片/总的时间片。</p><p>如图中，阴影/总大小就是流水线的效率。</p><figure><img src="'+n+'" alt="截图_20230522115949" tabindex="0" loading="lazy"><figcaption>截图_20230522115949</figcaption></figure></li></ul><h2 id="储存系统" tabindex="-1"><a class="header-anchor" href="#储存系统" aria-hidden="true">#</a> 储存系统</h2><ul><li><p>寄存器</p></li><li><p>Cache</p><p>利用局部性原理，最近被访问的数据大概率会被再次访问，相邻的数据大概率也会被访问</p></li><li><p>内存</p><ul><li><p>随机储存</p><p>DRAM</p><p>SRAM</p></li><li><p>只读储存</p><p>MROM</p><p>PROM</p><p>EPROM</p><p>flash memory</p></li></ul></li><li><p>外存</p></li></ul><figure><img src="'+p+'" alt="截图_20230522183216" tabindex="0" loading="lazy"><figcaption>截图_20230522183216</figcaption></figure><h2 id="总线系统" tabindex="-1"><a class="header-anchor" href="#总线系统" aria-hidden="true">#</a> 总线系统</h2><ul><li><p>内部总线</p><p>芯片之间的总线</p></li><li><p>系统总线</p><p>数据总线、地址总线、控制总线</p></li><li><p>外部总线</p><p>外设的总线，如sata总线、PCIE总线</p></li></ul><h2 id="可靠性" tabindex="-1"><a class="header-anchor" href="#可靠性" aria-hidden="true">#</a> 可靠性</h2><ul><li><p>计算可靠度</p><ul><li><p>串联系统</p><p>各个子系统的可靠度相乘</p></li><li><p>并联系统</p><p>只要有一个子系统能正常运行，整个系统就能正常。换句话，并联系统的可靠度就是1-各个子系统不可靠的概率相乘</p></li></ul></li><li><p>模冗余系统和混合系统</p></li></ul><h2 id="校验码" tabindex="-1"><a class="header-anchor" href="#校验码" aria-hidden="true">#</a> 校验码</h2><h3 id="码距" tabindex="-1"><a class="header-anchor" href="#码距" aria-hidden="true">#</a> 码距</h3><p>一个编码系统的码距是整个编码系统中任意（所有）两个码字的最小距离，这里的距离指的是将两个码字不同位的数量。</p><p>例：</p><p>若用1位长度的二进制编码，若A=1，B=0，这样A,B之间的最小码距为1。</p><p>若用2位长度的二进制编码，若A=11，B=00，A、B之间的最小码距为2。</p><p>若用3位长度的二进制编码，可选用111,000作为合法编码。A,B之间的最小码距为3。</p><h3 id="码距与检错、纠错的关系-不要求深究-记一下就可" tabindex="-1"><a class="header-anchor" href="#码距与检错、纠错的关系-不要求深究-记一下就可" aria-hidden="true">#</a> 码距与检错、纠错的关系（不要求深究，记一下就可）</h3><ul><li><p>在一个码组内为了检测e个误码，要求最小码距d应该满足：d&gt;=e+1</p></li><li><p>在一个码组内为了纠正t个误码，要求最小码距d应该满足：d&gt;=2t+1</p></li></ul><h3 id="crc-检错" tabindex="-1"><a class="header-anchor" href="#crc-检错" aria-hidden="true">#</a> CRC（检错）</h3><p>使用模2除法，而不是普通除法。模2除法就是两数相减时候采用异或的方式。</p><p>这里举个例子</p><p>原始报文是</p>',41),c=a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("mn",null,"11001010101")]),a("annotation",{encoding:"application/x-tex"}," 11001010101 ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"11001010101")])])])])],-1),d=a("p",null,"生成多项式是",-1),m=a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mi",null,"x"),a("mn",null,"4")]),a("mo",null,"+"),a("msup",null,[a("mi",null,"x"),a("mn",null,"3")]),a("mo",null,"+"),a("mi",null,"x"),a("mo",null,"+"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"}," x^4+x^3+x+1 ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.9474em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"x"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8641em"}},[a("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"4")])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.9474em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"x"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8641em"}},[a("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"3")])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])])],-1),o=a("p",null,"那么，除数就是",-1),u=a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("mn",null,"11011")]),a("annotation",{encoding:"application/x-tex"}," 11011 ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"11011")])])])])],-1),x=a("p",null,"然后要为原始报文补上4个0，补多少个0看生成多项式的最高次数，这4个0的目的是为了计算出一个FCS，这时的被除数是",-1),g=a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("mn",null,"1110010101010000")]),a("annotation",{encoding:"application/x-tex"}," 1110010101010000 ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1110010101010000")])])])])],-1),_=a("h3",{id:"海明-纠错-考察频率高",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#海明-纠错-考察频率高","aria-hidden":"true"},"#"),i(" 海明（纠错）（考察频率高）")],-1),b=[r,c,d,m,o,u,x,g,_];function y(f,k){return l(),t("div",null,b)}const C=s(h,[["render",y],["__file","计算机组成原理和组成结构.html.vue"]]);export{C as default};
