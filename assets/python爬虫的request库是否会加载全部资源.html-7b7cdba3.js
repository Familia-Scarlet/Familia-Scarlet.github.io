import{_ as e,o as t,c as s,a}from"./app-09c9e424.js";const r={},n=a('<p>先给出结论，对于有html结构的网页，即不是那种一张图片独占整个页面的网页，默认就不会加载全部。</p><h2 id="对于普通的非单图片独占的网页" tabindex="-1"><a class="header-anchor" href="#对于普通的非单图片独占的网页" aria-hidden="true">#</a> 对于普通的非单图片独占的网页</h2><p>可以用这个网站做个实验https://yande.re/post，直接在浏览器中打开，加载全部资源要花费40s。但是在python中，从访问到解析出这个网页的html结构只花了7s。这也说明了默认不会加载全部资源这一点。</p><p>但是，还无法验证获取到html结构后是否会继续下载其他资源，所以这里可以采用手动关闭request.close()的方式来进行终止，真实情况有待实验。</p><p>这一点的实验结果也出来了，结论是不会下载其他资源。实验过程是使用clash进行流量的监控，在直接访问浏览器的时候除了会访问yande.re外还会访问assets.yande.re来获取其他资源，而如果是使用python的request库来进行访问的话，就只会访问yande.re而不会访问assets.yande.re来获取其他资源。</p><p>==所以，request库只会爬取普通网页的html结构，而不会去加载图片资源==</p><h2 id="对于单图片或视频独占的网页" tabindex="-1"><a class="header-anchor" href="#对于单图片或视频独占的网页" aria-hidden="true">#</a> 对于单图片或视频独占的网页</h2><p>对于这种网页，网页的内容就是图片，是必须加载全部资源才能进行处理的。</p><p>而且，处理这种网页还能用stream这个选项，意思就是进行request请求后保持链接但不会立刻去接收服务端发来的内容，而是当访问content或text后再进行资源的下载。</p><p>==另外，request的返回结果response的text和content的内容是一致的，对于普通网页就都是html结构，对于单图片则都是图片的二进制编码==</p>',10),_=[n];function h(o,p){return t(),s("div",null,_)}const d=e(r,[["render",h],["__file","python爬虫的request库是否会加载全部资源.html.vue"]]);export{d as default};
