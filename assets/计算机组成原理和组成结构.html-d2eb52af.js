const e=JSON.parse('{"key":"v-07c84632","path":"/familia-article/%E8%BD%AF%E8%80%83/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%92%8C%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84.html","title":"计算机组成原理和组成结构","lang":"zh-CN","frontmatter":{"title":"计算机组成原理和组成结构","date":"2023-05-12T00:00:00.000Z","description":"数据的表示 原、反、补、移 正数的原码、反码、补码、移码相同 负数的反码是原码的非符号位全取反，补码是原码的非符号位全取反再+1，移码是补码的符号位取反 ​\\t补码常通过扫码法获取，方法是从右往左找出原码的第一个1，这个1保持不变，其他非符号\\t位取反。另外，补码的补码就是原码。 n个位时数值的表示范围 原码和反码是一致的，因为有+0和-0的区分。 在补码中，+0和-0的补码都是全0，既然补码0能表示+0和-0，那么就代表着有一个补码是多出来的，于是补码则将1000当做最小的数，这是规定，所以在负数段会有2^(n-1)个数。","head":[["meta",{"property":"og:url","content":"https://familia-scarlet.github.io/familia-article/%E8%BD%AF%E8%80%83/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%92%8C%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"芙咪莉娅ฅ’ω’ฅ"}],["meta",{"property":"og:title","content":"计算机组成原理和组成结构"}],["meta",{"property":"og:description","content":"数据的表示 原、反、补、移 正数的原码、反码、补码、移码相同 负数的反码是原码的非符号位全取反，补码是原码的非符号位全取反再+1，移码是补码的符号位取反 ​\\t补码常通过扫码法获取，方法是从右往左找出原码的第一个1，这个1保持不变，其他非符号\\t位取反。另外，补码的补码就是原码。 n个位时数值的表示范围 原码和反码是一致的，因为有+0和-0的区分。 在补码中，+0和-0的补码都是全0，既然补码0能表示+0和-0，那么就代表着有一个补码是多出来的，于是补码则将1000当做最小的数，这是规定，所以在负数段会有2^(n-1)个数。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T08:12:36.000Z"}],["meta",{"property":"article:author","content":"芙咪莉娅"}],["meta",{"property":"article:published_time","content":"2023-05-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-17T08:12:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机组成原理和组成结构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-17T08:12:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"芙咪莉娅\\",\\"url\\":\\"https://github.com/Familia-Scarlet\\"}]}"]]},"headers":[{"level":2,"title":"数据的表示","slug":"数据的表示","link":"#数据的表示","children":[{"level":3,"title":"原、反、补、移","slug":"原、反、补、移","link":"#原、反、补、移","children":[]},{"level":3,"title":"浮点数","slug":"浮点数","link":"#浮点数","children":[]}]},{"level":2,"title":"计算机结构","slug":"计算机结构","link":"#计算机结构","children":[]},{"level":2,"title":"Flynn分类法","slug":"flynn分类法","link":"#flynn分类法","children":[]},{"level":2,"title":"CISC与RISC","slug":"cisc与risc","link":"#cisc与risc","children":[]},{"level":2,"title":"流水线技术","slug":"流水线技术","link":"#流水线技术","children":[]},{"level":2,"title":"储存系统","slug":"储存系统","link":"#储存系统","children":[]},{"level":2,"title":"总线系统","slug":"总线系统","link":"#总线系统","children":[]},{"level":2,"title":"可靠性","slug":"可靠性","link":"#可靠性","children":[]},{"level":2,"title":"校验码","slug":"校验码","link":"#校验码","children":[{"level":3,"title":"CRC","slug":"crc","link":"#crc","children":[]},{"level":3,"title":"海明","slug":"海明","link":"#海明","children":[]}]}],"git":{"createdTime":1684311156000,"updatedTime":1684311156000,"contributors":[{"name":"Familia","email":"1692662759@qq.com","commits":1}]},"readingTime":{"minutes":2.33,"words":699},"filePathRelative":"familia-article/软考/计算机组成原理和组成结构.md","localizedDate":"2023年5月12日","excerpt":"<h2> 数据的表示</h2>\\n<h3> 原、反、补、移</h3>\\n<ul>\\n<li>\\n<p>正数的原码、反码、补码、移码相同</p>\\n</li>\\n<li>\\n<p>负数的反码是原码的非符号位全取反，补码是原码的非符号位全取反再+1，移码是补码的符号位取反</p>\\n</li>\\n</ul>\\n<p>​\\t补码常通过扫码法获取，方法是从右往左找出原码的第一个1，这个1保持不变，其他非符号\\t位取反。另外，补码的补码就是原码。</p>\\n<ul>\\n<li>\\n<p>n个位时数值的表示范围</p>\\n<p>原码和反码是一致的，因为有+0和-0的区分。</p>\\n<p>在补码中，+0和-0的补码都是全0，既然补码0能表示+0和-0，那么就代表着有一个补码是多出来的，于是补码则将1000当做最小的数，这是规定，所以在负数段会有2^(n-1)个数。</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
