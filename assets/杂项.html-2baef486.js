const e=JSON.parse('{"key":"v-49143a66","path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%9D%82%E9%A1%B9.html","title":"杂项","lang":"zh-CN","frontmatter":{"title":"杂项","date":"2020-01-01T00:00:00.000Z","description":"软件工程的三要素 软件工程包括三个要素：方法、工具和过程。 适配器模式 类适配器模式 如果想扩展一个已经存在的类的功能，可以使用适配器。定义一个接口，定义一个继承被扩展的类并实现接口，这个接口要定义被扩展的类的全部方法，而且实现类要进行重写，重写过程中要调用父类。 观察者模式 观察者会被注册到被观察者的容器中，当被观察者状态发生变化后，会调用容器中全部观察者的方法。常用于发布通知，动态监听，桌面交互就这么实现的。 观察者模式是一种行为设计模式，用于将对象之间的一对多依赖关系解耦。其中，当一个对象发生改变时，会自动通知其所有的观察者对象，使得这些观察者能够做出相应的响应。下面是一个简单的实现：","head":[["meta",{"property":"og:url","content":"https://fumilia.github.io/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%9D%82%E9%A1%B9.html"}],["meta",{"property":"og:site_name","content":"芙咪莉娅ฅ ̳͒•ˑ̫• ̳͒ฅ"}],["meta",{"property":"og:title","content":"杂项"}],["meta",{"property":"og:description","content":"软件工程的三要素 软件工程包括三个要素：方法、工具和过程。 适配器模式 类适配器模式 如果想扩展一个已经存在的类的功能，可以使用适配器。定义一个接口，定义一个继承被扩展的类并实现接口，这个接口要定义被扩展的类的全部方法，而且实现类要进行重写，重写过程中要调用父类。 观察者模式 观察者会被注册到被观察者的容器中，当被观察者状态发生变化后，会调用容器中全部观察者的方法。常用于发布通知，动态监听，桌面交互就这么实现的。 观察者模式是一种行为设计模式，用于将对象之间的一对多依赖关系解耦。其中，当一个对象发生改变时，会自动通知其所有的观察者对象，使得这些观察者能够做出相应的响应。下面是一个简单的实现："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-18T17:31:18.000Z"}],["meta",{"property":"article:author","content":"芙咪莉娅"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-18T17:31:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"杂项\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-18T17:31:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"芙咪莉娅\\",\\"url\\":\\"https://github.com/Fumilia\\"}]}"]]},"headers":[{"level":2,"title":"软件工程的三要素","slug":"软件工程的三要素","link":"#软件工程的三要素","children":[]},{"level":2,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[{"level":3,"title":"类适配器模式","slug":"类适配器模式","link":"#类适配器模式","children":[]}]},{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":2,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":2,"title":"堆排序","slug":"堆排序","link":"#堆排序","children":[]},{"level":2,"title":"排序的稳定性","slug":"排序的稳定性","link":"#排序的稳定性","children":[]}],"git":{"createdTime":1684431078000,"updatedTime":1684431078000,"contributors":[{"name":"Familia","email":"1692662759@qq.com","commits":1}]},"readingTime":{"minutes":2.25,"words":675},"filePathRelative":"学习笔记/计算机基础/杂项.md","localizedDate":"2020年1月1日","excerpt":"<h2> 软件工程的三要素</h2>\\n<p>软件工程包括三个要素：方法、工具和过程。</p>\\n<h2> 适配器模式</h2>\\n<h3> 类适配器模式</h3>\\n<p>如果想扩展一个已经存在的类的功能，可以使用适配器。定义一个接口，定义一个继承被扩展的类并实现接口，这个接口要定义被扩展的类的全部方法，而且实现类要进行重写，重写过程中要调用父类。</p>\\n<h2> 观察者模式</h2>\\n<p>观察者会被注册到被观察者的容器中，当被观察者状态发生变化后，会调用容器中全部观察者的方法。常用于发布通知，动态监听，桌面交互就这么实现的。</p>\\n<p>观察者模式是一种行为设计模式，用于将对象之间的一对多依赖关系解耦。其中，当一个对象发生改变时，会自动通知其所有的观察者对象，使得这些观察者能够做出相应的响应。下面是一个简单的实现：</p>","autoDesc":true}');export{e as data};
