const t=JSON.parse('{"key":"v-3f6f1d6a","path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Spark/Spark%E5%86%85%E6%A0%B8_%E6%BA%90%E7%A0%81.html","title":"spark内核&源码","lang":"zh-CN","frontmatter":{"title":"spark内核&源码","date":"2024-03-29T00:00:00.000Z","description":"### 闭包 闭包环境是指创建闭包时捕获的那些外部变量的作用域，它是闭包能够记住并访问其外部（或词法）作用域中的变量的原因。闭包环境包括了闭包函数定义时可访问的所有局部变量、参数和其他闭包。 当一个函数（我们称之为内部函数）被定义在另一个函数（外部函数）的作用域内时，内部函数就有可能创建一个闭包。内部函数可以访问外部函数的变量，即使外部函数已经执行完毕。这些变量和内部函数一起构成了闭包环境。 闭包环境的存在允许内部函数在外部函数执行完毕后仍然能够引用和操作外部函数的变量。这种特性在很多编程语言中都可以找到，尤其是在支持一级函数（first-class functions）的语言中，如 JavaScript、Python、Ruby 等。","head":[["meta",{"property":"og:url","content":"https://familior.github.io/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Spark/Spark%E5%86%85%E6%A0%B8_%E6%BA%90%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"Familiarたん"}],["meta",{"property":"og:title","content":"spark内核&源码"}],["meta",{"property":"og:description","content":"### 闭包 闭包环境是指创建闭包时捕获的那些外部变量的作用域，它是闭包能够记住并访问其外部（或词法）作用域中的变量的原因。闭包环境包括了闭包函数定义时可访问的所有局部变量、参数和其他闭包。 当一个函数（我们称之为内部函数）被定义在另一个函数（外部函数）的作用域内时，内部函数就有可能创建一个闭包。内部函数可以访问外部函数的变量，即使外部函数已经执行完毕。这些变量和内部函数一起构成了闭包环境。 闭包环境的存在允许内部函数在外部函数执行完毕后仍然能够引用和操作外部函数的变量。这种特性在很多编程语言中都可以找到，尤其是在支持一级函数（first-class functions）的语言中，如 JavaScript、Python、Ruby 等。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Familiar"}],["meta",{"property":"article:published_time","content":"2024-03-29T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"spark内核&源码\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-29T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Familiar\\",\\"url\\":\\"https://github.com/Familior\\"}]}"]]},"headers":[{"level":3,"title":"### 闭包","slug":"闭包","link":"#闭包","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.43,"words":428},"filePathRelative":"学习笔记/大数据/Spark/Spark内核&源码.md","localizedDate":"2024年3月29日","excerpt":"<h3> ### 闭包</h3>\\n<p>闭包环境是指创建闭包时捕获的那些外部变量的作用域，它是闭包能够记住并访问其外部（或词法）作用域中的变量的原因。闭包环境包括了闭包函数定义时可访问的所有局部变量、参数和其他闭包。</p>\\n<p>当一个函数（我们称之为内部函数）被定义在另一个函数（外部函数）的作用域内时，内部函数就有可能创建一个闭包。内部函数可以访问外部函数的变量，即使外部函数已经执行完毕。这些变量和内部函数一起构成了闭包环境。</p>\\n<p>闭包环境的存在允许内部函数在外部函数执行完毕后仍然能够引用和操作外部函数的变量。这种特性在很多编程语言中都可以找到，尤其是在支持一级函数（first-class functions）的语言中，如 JavaScript、Python、Ruby 等。</p>","autoDesc":true}');export{t as data};
